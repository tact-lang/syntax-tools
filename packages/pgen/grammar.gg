Grammar = rules:Rule*;
Rule = name:ident formals:formals? "=" body:ruleBody ";";
formals = "<" @(head:ident tail:("," @ident)*)? ">";
ruleBody = @Alt;
Alt = head:Seq tail:("/" @Seq)*;
Seq = exprs:Sel*;
Sel = selector:selector? expr:Iter;
selector = @Name / @Choose;
Name = name:ident ":";
Choose = "@";
Iter = prefix:(@[!&#$])* expr:base suffix:(@[*+?])?;
base = @Apply / @#Class / @#Terminal / @paren / @Any;
Apply = name:ident params:params?;
params = "<" @(head:Seq tail:("," @Seq)*)? ">";
Class = "[" negated:"^"? seqs:classSeq* "]" insensitive:"i"?;
classSeq = @Group / @classChar;
Group = from:classChar "-" to:classChar;
classChar = "\\" @(@SpecialClass / @escape) / @ClassChar;
SpecialClass = value:[\\\]];
ClassChar = value:[^\\\]];
Terminal = "\"" value:char* "\"";
paren = "(" @Alt ")";
Any = ".";
ident = @$#([a-z_]i [a-z0-9_]i*);
char = "\\" @(@Special / @escape) / @Char;
Char = value:[^\\"];
escape = @Named / @unicode / @Ascii;
Special = value:[\\"];
Named = value:[bnrt];
unicode = "u" @(@Short / @Long);
Short = value:$(hexDigit hexDigit hexDigit hexDigit);
Long = "{" value:$hexDigit+ "}";
Ascii = "x" value:$(hexDigit hexDigit);
hexDigit = [0-9a-f]i;
space = [ \t\n\r] / Single / Multi;
Single = "//" value:$[^\n\r]*;
Multi = "/*" value:$(!"*/" .)* "*/";
eof = !.;
