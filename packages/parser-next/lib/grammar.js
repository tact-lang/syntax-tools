"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.initOf$noSkip = exports.trait$noSkip = exports.$with$noSkip = exports.$import$noSkip = exports.external$noSkip = exports.$extends$noSkip = exports.mutates$noSkip = exports.map$noSkip = exports.$as$noSkip = exports.foreach$noSkip = exports.$catch$noSkip = exports.$try$noSkip = exports.until$noSkip = exports.$do$noSkip = exports.repeat$noSkip = exports.$while$noSkip = exports.$else$noSkip = exports.$if$noSkip = exports.$null$noSkip = exports.$public$noSkip = exports.primitive$noSkip = exports.$native$noSkip = exports.extend$noSkip = exports.receive$noSkip = exports.$return$noSkip = exports.$let$noSkip = exports.fun$noSkip = exports.fun = exports.functionAttribute = exports.$abstract = exports.inline = exports.override = exports.virtual = exports.$extends = exports.mutates = exports.PrimitiveTypeDecl = exports.TypeId = exports.primitive = exports.Import = exports.StringLiteral = exports.escapeSequence$noSkip = exports.escapeChar$noSkip = exports.hexDigit$noSkip = exports.nonQuoteOrBackslashChar$noSkip = exports.$import = exports.space$noSkip = exports.comment$noSkip = exports.singleLineComment$noSkip = exports.multiLineComment$noSkip = exports.idPart$noSkip = void 0;
exports.BitwiseAnd = exports.Equality = exports.Compare = exports.BitwiseShift = exports.Add = exports.Mul = exports.Unary = exports.Suffix = exports.primary = exports.Parens = exports.parens = exports.StructInstance = exports.structFieldInitializer = exports.InitOf = exports.parametersFactual = exports.suffix = exports.SuffixCall = exports.SuffixFieldAccess = exports.SuffixUnboxNotNull = exports.$null = exports.initOf = exports.BoolLiteral = exports.idPart = exports.integerLiteral = exports.IntegerLiteralDec = exports.digit = exports.IntegerLiteralOct = exports.IntegerLiteralBin = exports.IntegerLiteralHex = exports.hexDigit = exports.$let = exports.parametersFormal = exports.Parameter = exports.ascription = exports.$type = exports.TypeBounced = exports.TypeMap = exports.$as = exports.map = exports.TypeRegular = exports.TypeOptional = exports.inter = exports.Id = exports.reservedWord$noSkip = exports.keyword$noSkip = exports.$const$noSkip = exports.inline$noSkip = exports.virtual$noSkip = exports.$abstract$noSkip = exports.override$noSkip = void 0;
exports.notKeyword = exports.notTypeKeyword = exports.notControlKeyword = exports.notDelimiter = exports.notAssignOperator = exports.notBitwiseOperator = exports.notComparisonOperator = exports.notArithOperator = exports.notUnderscore = exports.funcQuotedId = exports.AsmFunction = exports.asmInstruction = exports.AsmAny = exports.space = exports.comment = exports.singleLineComment = exports.multiLineComment = exports.AsmData = exports.Function = exports.FunctionDeclaration = exports.FunctionDefinition = exports.statements = exports.statement = exports.StatementBlock = exports.StatementCondition = exports.StatementWhile = exports.StatementRepeat = exports.StatementUntil = exports.StatementTry = exports.StatementForEach = exports.StatementAssign = exports.StatementExpression = exports.foreach = exports.$catch = exports.$try = exports.until = exports.$do = exports.repeat = exports.$while = exports.$else = exports.$if = exports.StatementReturn = exports.$return = exports.StatementLet = exports.expression = exports.Conditional = exports.Or = exports.And = exports.BitwiseOr = exports.BitwiseXor = void 0;
exports.ascription$noSkip = exports.$type$noSkip = exports.TypeBounced$noSkip = exports.TypeMap$noSkip = exports.TypeRegular$noSkip = exports.TypeOptional$noSkip = exports.inter$noSkip = exports.Id$noSkip = exports.functionAttribute$noSkip = exports.PrimitiveTypeDecl$noSkip = exports.TypeId$noSkip = exports.Import$noSkip = exports.StringLiteral$noSkip = exports.Module = exports.moduleItem = exports.Trait = exports.traitItemDecl = exports.trait = exports.Contract = exports.contractItemDecl = exports.storageVar = exports.receiver = exports.ReceiverBounced = exports.ReceiverExternal = exports.external = exports.ReceiverReceive = exports.receiverParam = exports.receive = exports.ContractInit = exports.InheritedTraits = exports.$with = exports.contract = exports.ContractAttribute = exports.MessageDecl = exports.StructDecl = exports.structFields = exports.FieldDecl = exports.Constant = exports.ConstantDeclaration = exports.ConstantDefinition = exports.$const = exports.NativeFunctionDecl = exports.$native = exports.funcId = exports.funcPlainId = exports.whiteSpace = exports.funcInvalidId = exports.notHexadecimalNumber = exports.notDecimalNumber = exports.notDirective = void 0;
exports.Function$noSkip = exports.FunctionDeclaration$noSkip = exports.FunctionDefinition$noSkip = exports.statements$noSkip = exports.statement$noSkip = exports.StatementBlock$noSkip = exports.StatementCondition$noSkip = exports.StatementWhile$noSkip = exports.StatementRepeat$noSkip = exports.StatementUntil$noSkip = exports.StatementTry$noSkip = exports.StatementForEach$noSkip = exports.StatementAssign$noSkip = exports.StatementExpression$noSkip = exports.StatementReturn$noSkip = exports.StatementLet$noSkip = exports.expression$noSkip = exports.Conditional$noSkip = exports.Or$noSkip = exports.And$noSkip = exports.BitwiseOr$noSkip = exports.BitwiseXor$noSkip = exports.BitwiseAnd$noSkip = exports.Equality$noSkip = exports.Compare$noSkip = exports.BitwiseShift$noSkip = exports.Add$noSkip = exports.Mul$noSkip = exports.Unary$noSkip = exports.Suffix$noSkip = exports.primary$noSkip = exports.Parens$noSkip = exports.parens$noSkip = exports.StructInstance$noSkip = exports.structFieldInitializer$noSkip = exports.InitOf$noSkip = exports.parametersFactual$noSkip = exports.suffix$noSkip = exports.SuffixCall$noSkip = exports.SuffixFieldAccess$noSkip = exports.SuffixUnboxNotNull$noSkip = exports.BoolLiteral$noSkip = exports.integerLiteral$noSkip = exports.IntegerLiteralDec$noSkip = exports.digit$noSkip = exports.IntegerLiteralOct$noSkip = exports.IntegerLiteralBin$noSkip = exports.IntegerLiteralHex$noSkip = exports.parametersFormal$noSkip = exports.Parameter$noSkip = void 0;
exports.$public = exports.extend = exports.escapeSequence = exports.escapeChar = exports.nonQuoteOrBackslashChar = exports.Module$noSkip = exports.moduleItem$noSkip = exports.Trait$noSkip = exports.traitItemDecl$noSkip = exports.Contract$noSkip = exports.contractItemDecl$noSkip = exports.storageVar$noSkip = exports.receiver$noSkip = exports.ReceiverBounced$noSkip = exports.ReceiverExternal$noSkip = exports.ReceiverReceive$noSkip = exports.receiverParam$noSkip = exports.ContractInit$noSkip = exports.InheritedTraits$noSkip = exports.contract$noSkip = exports.ContractAttribute$noSkip = exports.MessageDecl$noSkip = exports.StructDecl$noSkip = exports.structFields$noSkip = exports.FieldDecl$noSkip = exports.Constant$noSkip = exports.ConstantDeclaration$noSkip = exports.ConstantDefinition$noSkip = exports.NativeFunctionDecl$noSkip = exports.funcId$noSkip = exports.funcPlainId$noSkip = exports.whiteSpace$noSkip = exports.funcInvalidId$noSkip = exports.notHexadecimalNumber$noSkip = exports.notDecimalNumber$noSkip = exports.notDirective$noSkip = exports.notKeyword$noSkip = exports.notTypeKeyword$noSkip = exports.notControlKeyword$noSkip = exports.notDelimiter$noSkip = exports.notAssignOperator$noSkip = exports.notBitwiseOperator$noSkip = exports.notComparisonOperator$noSkip = exports.notArithOperator$noSkip = exports.notUnderscore$noSkip = exports.funcQuotedId$noSkip = exports.AsmFunction$noSkip = exports.asmInstruction$noSkip = exports.AsmAny$noSkip = exports.AsmData$noSkip = void 0;
exports.JustImports$noSkip = exports.JustImports = exports.reservedWord = exports.keyword = void 0;
const $ = __importStar(require("@langtools/runtime"));
exports.idPart$noSkip = $.regex("a-z0-9_", true);
exports.multiLineComment$noSkip = $.right($.str("/*"), $.right($.star($.right($.lookNeg($.str("*/")), $.right($.any, $.eps))), $.right($.str("*/"), $.eps)));
exports.singleLineComment$noSkip = $.right($.str("//"), $.right($.star($.regex("^\\r\\n", false)), $.eps));
exports.comment$noSkip = $.alt(exports.multiLineComment$noSkip, exports.singleLineComment$noSkip);
exports.space$noSkip = $.alt($.regex(" \\t\\r\\n", false), exports.comment$noSkip);
exports.$import = $.left($.right($.str("import"), $.right($.lookNeg(exports.idPart$noSkip), $.eps)), $.star(exports.space$noSkip));
exports.nonQuoteOrBackslashChar$noSkip = $.right($.lookNeg($.alt($.str("\""), $.str("\\"))), $.right($.any, $.eps));
exports.hexDigit$noSkip = $.regex("0-9a-f", true);
exports.escapeChar$noSkip = $.alt($.regex("\\\\\"nrtvbf", false), $.alt($.right($.str("u{"), $.right(exports.hexDigit$noSkip, $.right($.opt(exports.hexDigit$noSkip), $.right($.opt(exports.hexDigit$noSkip), $.right($.opt(exports.hexDigit$noSkip), $.right($.opt(exports.hexDigit$noSkip), $.right($.opt(exports.hexDigit$noSkip), $.right($.str("}"), $.eps)))))))), $.alt($.right($.str("u"), $.right(exports.hexDigit$noSkip, $.right(exports.hexDigit$noSkip, $.right(exports.hexDigit$noSkip, $.right(exports.hexDigit$noSkip, $.eps))))), $.right($.str("x"), $.right(exports.hexDigit$noSkip, $.right(exports.hexDigit$noSkip, $.eps))))));
exports.escapeSequence$noSkip = $.right($.str("\\"), $.right(exports.escapeChar$noSkip, $.eps));
exports.StringLiteral = $.field($.pure("StringLiteral"), "$", $.field($.left($.stry($.right($.str("\""), $.right($.star($.alt(exports.nonQuoteOrBackslashChar$noSkip, exports.escapeSequence$noSkip)), $.right($.str("\""), $.eps)))), $.star(exports.space$noSkip)), "value", $.eps));
exports.Import = $.field($.pure("Import"), "$", $.right(exports.$import, $.field(exports.StringLiteral, "path", $.right($.left($.str(";"), $.star(exports.space$noSkip)), $.eps))));
exports.primitive = $.left($.right($.str("primitive"), $.right($.lookNeg(exports.idPart$noSkip), $.eps)), $.star(exports.space$noSkip));
exports.TypeId = $.field($.pure("TypeId"), "$", $.field($.left($.stry($.right($.regex("A-Z", false), $.right($.star($.regex("a-z0-9_", true)), $.eps))), $.star(exports.space$noSkip)), "name", $.eps));
exports.PrimitiveTypeDecl = $.field($.pure("PrimitiveTypeDecl"), "$", $.right(exports.primitive, $.field(exports.TypeId, "name", $.right($.left($.str(";"), $.star(exports.space$noSkip)), $.eps))));
exports.mutates = $.left($.right($.str("mutates"), $.right($.lookNeg(exports.idPart$noSkip), $.eps)), $.star(exports.space$noSkip));
exports.$extends = $.left($.right($.str("extends"), $.right($.lookNeg(exports.idPart$noSkip), $.eps)), $.star(exports.space$noSkip));
exports.virtual = $.left($.right($.str("virtual"), $.right($.lookNeg(exports.idPart$noSkip), $.eps)), $.star(exports.space$noSkip));
exports.override = $.left($.right($.str("override"), $.right($.lookNeg(exports.idPart$noSkip), $.eps)), $.star(exports.space$noSkip));
exports.inline = $.left($.right($.str("inline"), $.right($.lookNeg(exports.idPart$noSkip), $.eps)), $.star(exports.space$noSkip));
exports.$abstract = $.left($.right($.str("abstract"), $.right($.lookNeg(exports.idPart$noSkip), $.eps)), $.star(exports.space$noSkip));
exports.functionAttribute = $.alt($.left($.str("get"), $.star(exports.space$noSkip)), $.alt(exports.mutates, $.alt(exports.$extends, $.alt(exports.virtual, $.alt(exports.override, $.alt(exports.inline, exports.$abstract))))));
exports.fun = $.left($.right($.str("fun"), $.right($.lookNeg(exports.idPart$noSkip), $.eps)), $.star(exports.space$noSkip));
exports.fun$noSkip = $.right($.str("fun"), $.right($.lookNeg(exports.idPart$noSkip), $.eps));
exports.$let$noSkip = $.right($.str("let"), $.right($.lookNeg(exports.idPart$noSkip), $.eps));
exports.$return$noSkip = $.right($.str("return"), $.right($.lookNeg(exports.idPart$noSkip), $.eps));
exports.receive$noSkip = $.right($.str("receive"), $.right($.lookNeg(exports.idPart$noSkip), $.eps));
exports.extend$noSkip = $.right($.str("extend"), $.right($.lookNeg(exports.idPart$noSkip), $.eps));
exports.$native$noSkip = $.right($.str("native"), $.right($.lookNeg(exports.idPart$noSkip), $.eps));
exports.primitive$noSkip = $.right($.str("primitive"), $.right($.lookNeg(exports.idPart$noSkip), $.eps));
exports.$public$noSkip = $.right($.str("public"), $.right($.lookNeg(exports.idPart$noSkip), $.eps));
exports.$null$noSkip = $.right($.str("null"), $.right($.lookNeg(exports.idPart$noSkip), $.eps));
exports.$if$noSkip = $.right($.str("if"), $.right($.lookNeg(exports.idPart$noSkip), $.eps));
exports.$else$noSkip = $.right($.str("else"), $.right($.lookNeg(exports.idPart$noSkip), $.eps));
exports.$while$noSkip = $.right($.str("while"), $.right($.lookNeg(exports.idPart$noSkip), $.eps));
exports.repeat$noSkip = $.right($.str("repeat"), $.right($.lookNeg(exports.idPart$noSkip), $.eps));
exports.$do$noSkip = $.right($.str("do"), $.right($.lookNeg(exports.idPart$noSkip), $.eps));
exports.until$noSkip = $.right($.str("until"), $.right($.lookNeg(exports.idPart$noSkip), $.eps));
exports.$try$noSkip = $.right($.str("try"), $.right($.lookNeg(exports.idPart$noSkip), $.eps));
exports.$catch$noSkip = $.right($.str("catch"), $.right($.lookNeg(exports.idPart$noSkip), $.eps));
exports.foreach$noSkip = $.right($.str("foreach"), $.right($.lookNeg(exports.idPart$noSkip), $.eps));
exports.$as$noSkip = $.right($.str("as"), $.right($.lookNeg(exports.idPart$noSkip), $.eps));
exports.map$noSkip = $.right($.str("map"), $.right($.lookNeg(exports.idPart$noSkip), $.eps));
exports.mutates$noSkip = $.right($.str("mutates"), $.right($.lookNeg(exports.idPart$noSkip), $.eps));
exports.$extends$noSkip = $.right($.str("extends"), $.right($.lookNeg(exports.idPart$noSkip), $.eps));
exports.external$noSkip = $.right($.str("external"), $.right($.lookNeg(exports.idPart$noSkip), $.eps));
exports.$import$noSkip = $.right($.str("import"), $.right($.lookNeg(exports.idPart$noSkip), $.eps));
exports.$with$noSkip = $.right($.str("with"), $.right($.lookNeg(exports.idPart$noSkip), $.eps));
exports.trait$noSkip = $.right($.str("trait"), $.right($.lookNeg(exports.idPart$noSkip), $.eps));
exports.initOf$noSkip = $.right($.str("initOf"), $.right($.lookNeg(exports.idPart$noSkip), $.eps));
exports.override$noSkip = $.right($.str("override"), $.right($.lookNeg(exports.idPart$noSkip), $.eps));
exports.$abstract$noSkip = $.right($.str("abstract"), $.right($.lookNeg(exports.idPart$noSkip), $.eps));
exports.virtual$noSkip = $.right($.str("virtual"), $.right($.lookNeg(exports.idPart$noSkip), $.eps));
exports.inline$noSkip = $.right($.str("inline"), $.right($.lookNeg(exports.idPart$noSkip), $.eps));
exports.$const$noSkip = $.right($.str("const"), $.right($.lookNeg(exports.idPart$noSkip), $.eps));
exports.keyword$noSkip = $.alt(exports.fun$noSkip, $.alt(exports.$let$noSkip, $.alt(exports.$return$noSkip, $.alt(exports.receive$noSkip, $.alt(exports.extend$noSkip, $.alt(exports.$native$noSkip, $.alt(exports.primitive$noSkip, $.alt(exports.$public$noSkip, $.alt(exports.$null$noSkip, $.alt(exports.$if$noSkip, $.alt(exports.$else$noSkip, $.alt(exports.$while$noSkip, $.alt(exports.repeat$noSkip, $.alt(exports.$do$noSkip, $.alt(exports.until$noSkip, $.alt(exports.$try$noSkip, $.alt(exports.$catch$noSkip, $.alt(exports.foreach$noSkip, $.alt(exports.$as$noSkip, $.alt(exports.map$noSkip, $.alt(exports.mutates$noSkip, $.alt(exports.$extends$noSkip, $.alt(exports.external$noSkip, $.alt(exports.$import$noSkip, $.alt(exports.$with$noSkip, $.alt(exports.trait$noSkip, $.alt(exports.initOf$noSkip, $.alt(exports.override$noSkip, $.alt(exports.$abstract$noSkip, $.alt(exports.virtual$noSkip, $.alt(exports.inline$noSkip, exports.$const$noSkip)))))))))))))))))))))))))))))));
exports.reservedWord$noSkip = $.right(exports.keyword$noSkip, $.right($.lookNeg(exports.idPart$noSkip), $.eps));
exports.Id = $.field($.pure("Id"), "$", $.field($.left($.stry($.right($.lookNeg(exports.reservedWord$noSkip), $.right($.regex("a-z_", true), $.right($.star(exports.idPart$noSkip), $.eps)))), $.star(exports.space$noSkip)), "name", $.eps));
const inter = (A, B) => $.field($.ref(() => A), "head", $.field($.star($.field($.ref(() => B), "op", $.field($.ref(() => A), "right", $.eps))), "tail", $.eps));
exports.inter = inter;
exports.TypeOptional = $.field($.pure("TypeOptional"), "$", $.field(exports.TypeId, "child", $.right($.left($.str("?"), $.star(exports.space$noSkip)), $.eps)));
exports.TypeRegular = $.field($.pure("TypeRegular"), "$", $.field(exports.TypeId, "child", $.eps));
exports.map = $.left($.right($.str("map"), $.right($.lookNeg(exports.idPart$noSkip), $.eps)), $.star(exports.space$noSkip));
exports.$as = $.left($.right($.str("as"), $.right($.lookNeg(exports.idPart$noSkip), $.eps)), $.star(exports.space$noSkip));
exports.TypeMap = $.field($.pure("TypeMap"), "$", $.right(exports.map, $.right($.left($.str("<"), $.star(exports.space$noSkip)), $.field(exports.TypeId, "key", $.field($.opt($.right(exports.$as, exports.Id)), "keyAs", $.right($.left($.str(","), $.star(exports.space$noSkip)), $.field(exports.TypeId, "value", $.field($.opt($.right(exports.$as, exports.Id)), "valueAs", $.right($.left($.str(">"), $.star(exports.space$noSkip)), $.eps)))))))));
exports.TypeBounced = $.field($.pure("TypeBounced"), "$", $.right($.left($.str("bounced"), $.star(exports.space$noSkip)), $.right($.left($.str("<"), $.star(exports.space$noSkip)), $.field(exports.TypeId, "child", $.right($.left($.str(">"), $.star(exports.space$noSkip)), $.eps)))));
exports.$type = $.alt(exports.TypeOptional, $.alt(exports.TypeRegular, $.alt(exports.TypeMap, exports.TypeBounced)));
exports.ascription = $.right($.left($.str(":"), $.star(exports.space$noSkip)), exports.$type);
exports.Parameter = $.field($.pure("Parameter"), "$", $.field(exports.Id, "name", $.field(exports.ascription, "type", $.eps)));
exports.parametersFormal = $.right($.left($.str("("), $.star(exports.space$noSkip)), $.left($.opt((0, exports.inter)(exports.Parameter, $.left($.str(","), $.star(exports.space$noSkip)))), $.left($.opt($.left($.str(","), $.star(exports.space$noSkip))), $.left($.str(")"), $.star(exports.space$noSkip)))));
exports.$let = $.left($.right($.str("let"), $.right($.lookNeg(exports.idPart$noSkip), $.eps)), $.star(exports.space$noSkip));
exports.hexDigit = $.left($.regex("0-9a-f", true), $.star(exports.space$noSkip));
exports.IntegerLiteralHex = $.field($.pure("IntegerLiteralHex"), "$", $.right($.left($.str("0"), $.star(exports.space$noSkip)), $.right($.left($.regex("x", true), $.star(exports.space$noSkip)), $.field($.right(exports.hexDigit, $.right($.star($.right($.opt($.left($.str("_"), $.star(exports.space$noSkip))), $.right(exports.hexDigit, $.eps))), $.eps)), "digits", $.eps))));
exports.IntegerLiteralBin = $.field($.pure("IntegerLiteralBin"), "$", $.right($.left($.str("0"), $.star(exports.space$noSkip)), $.right($.left($.regex("b", true), $.star(exports.space$noSkip)), $.field($.right($.left($.regex("01", false), $.star(exports.space$noSkip)), $.right($.star($.right($.opt($.left($.str("_"), $.star(exports.space$noSkip))), $.right($.left($.regex("01", false), $.star(exports.space$noSkip)), $.eps))), $.eps)), "digits", $.eps))));
exports.IntegerLiteralOct = $.field($.pure("IntegerLiteralOct"), "$", $.right($.left($.str("0"), $.star(exports.space$noSkip)), $.right($.left($.regex("o", true), $.star(exports.space$noSkip)), $.field($.right($.left($.regex("0-7", false), $.star(exports.space$noSkip)), $.right($.star($.right($.opt($.left($.str("_"), $.star(exports.space$noSkip))), $.right($.left($.regex("0-7", false), $.star(exports.space$noSkip)), $.eps))), $.eps)), "digits", $.eps))));
exports.digit = $.left($.regex("0-9", false), $.star(exports.space$noSkip));
exports.IntegerLiteralDec = $.field($.pure("IntegerLiteralDec"), "$", $.field($.stry($.alt($.right($.left($.regex("1-9", false), $.star(exports.space$noSkip)), $.right($.star($.right($.opt($.left($.str("_"), $.star(exports.space$noSkip))), $.right(exports.digit, $.eps))), $.eps)), $.right($.left($.str("0"), $.star(exports.space$noSkip)), $.right($.star(exports.digit), $.eps)))), "digits", $.eps));
exports.integerLiteral = $.alt(exports.IntegerLiteralHex, $.alt(exports.IntegerLiteralBin, $.alt(exports.IntegerLiteralOct, exports.IntegerLiteralDec)));
exports.idPart = $.left($.regex("a-z0-9_", true), $.star(exports.space$noSkip));
exports.BoolLiteral = $.field($.pure("BoolLiteral"), "$", $.field($.alt($.left($.str("true"), $.star(exports.space$noSkip)), $.left($.str("false"), $.star(exports.space$noSkip))), "value", $.right($.lookNeg(exports.idPart), $.eps)));
exports.initOf = $.left($.right($.str("initOf"), $.right($.lookNeg(exports.idPart$noSkip), $.eps)), $.star(exports.space$noSkip));
exports.$null = $.left($.right($.str("null"), $.right($.lookNeg(exports.idPart$noSkip), $.eps)), $.star(exports.space$noSkip));
exports.SuffixUnboxNotNull = $.field($.pure("SuffixUnboxNotNull"), "$", $.right($.left($.str("!!"), $.star(exports.space$noSkip)), $.eps));
exports.SuffixFieldAccess = $.field($.pure("SuffixFieldAccess"), "$", $.right($.left($.str("."), $.star(exports.space$noSkip)), $.field(exports.Id, "name", $.eps)));
exports.SuffixCall = $.field($.pure("SuffixCall"), "$", $.field($.ref(() => exports.parametersFactual), "params", $.eps));
exports.suffix = $.alt(exports.SuffixUnboxNotNull, $.alt(exports.SuffixCall, exports.SuffixFieldAccess));
exports.parametersFactual = $.right($.left($.str("("), $.star(exports.space$noSkip)), $.left($.opt((0, exports.inter)($.ref(() => exports.expression), $.left($.str(","), $.star(exports.space$noSkip)))), $.left($.opt($.left($.str(","), $.star(exports.space$noSkip))), $.left($.str(")"), $.star(exports.space$noSkip)))));
exports.InitOf = $.field($.pure("InitOf"), "$", $.right(exports.initOf, $.field(exports.Id, "name", $.field(exports.parametersFactual, "params", $.eps))));
exports.structFieldInitializer = $.field(exports.Id, "name", $.field($.opt($.right($.left($.str(":"), $.star(exports.space$noSkip)), $.ref(() => exports.expression))), "init", $.eps));
exports.StructInstance = $.field($.pure("StructInstance"), "$", $.right(exports.TypeId, $.right($.left($.str("{"), $.star(exports.space$noSkip)), $.field($.opt((0, exports.inter)(exports.structFieldInitializer, $.left($.str(","), $.star(exports.space$noSkip)))), "fields", $.right($.opt($.left($.str(","), $.star(exports.space$noSkip))), $.right($.left($.str("}"), $.star(exports.space$noSkip)), $.eps))))));
exports.parens = $.right($.left($.str("("), $.star(exports.space$noSkip)), $.left($.ref(() => exports.expression), $.left($.str(")"), $.star(exports.space$noSkip))));
exports.Parens = $.field($.pure("Parens"), "$", $.right(exports.parens, $.eps));
exports.primary = $.alt(exports.Parens, $.alt(exports.StructInstance, $.alt(exports.integerLiteral, $.alt(exports.BoolLiteral, $.alt(exports.InitOf, $.alt(exports.$null, $.alt(exports.StringLiteral, exports.Id)))))));
exports.Suffix = $.field($.pure("Suffix"), "$", $.field(exports.primary, "expression", $.field($.star(exports.suffix), "suffixes", $.eps)));
exports.Unary = $.field($.pure("Unary"), "$", $.field($.star($.left($.regex("-+!~", false), $.star(exports.space$noSkip))), "prefixes", $.field(exports.Suffix, "expression", $.eps)));
exports.Mul = $.field($.pure("Mul"), "$", $.right((0, exports.inter)(exports.Unary, $.left($.regex("*/%", false), $.star(exports.space$noSkip))), $.eps));
exports.Add = $.field($.pure("Add"), "$", $.right((0, exports.inter)(exports.Mul, $.alt($.right($.left($.str("+"), $.star(exports.space$noSkip)), $.right($.lookNeg($.left($.str("+"), $.star(exports.space$noSkip))), $.eps)), $.right($.left($.str("-"), $.star(exports.space$noSkip)), $.right($.lookNeg($.left($.str("-"), $.star(exports.space$noSkip))), $.eps)))), $.eps));
exports.BitwiseShift = $.field($.pure("BitwiseShift"), "$", $.right((0, exports.inter)(exports.Add, $.alt($.left($.str("<<"), $.star(exports.space$noSkip)), $.left($.str(">>"), $.star(exports.space$noSkip)))), $.eps));
exports.Compare = $.field($.pure("Compare"), "$", $.right((0, exports.inter)(exports.BitwiseShift, $.alt($.left($.str("<="), $.star(exports.space$noSkip)), $.alt($.left($.str("<"), $.star(exports.space$noSkip)), $.alt($.left($.str(">="), $.star(exports.space$noSkip)), $.left($.str(">"), $.star(exports.space$noSkip)))))), $.eps));
exports.Equality = $.field($.pure("Equality"), "$", $.right((0, exports.inter)(exports.Compare, $.alt($.left($.str("!="), $.star(exports.space$noSkip)), $.left($.str("=="), $.star(exports.space$noSkip)))), $.eps));
exports.BitwiseAnd = $.field($.pure("BitwiseAnd"), "$", $.right((0, exports.inter)(exports.Equality, $.left($.str("&"), $.star(exports.space$noSkip))), $.eps));
exports.BitwiseXor = $.field($.pure("BitwiseXor"), "$", $.right((0, exports.inter)(exports.BitwiseAnd, $.left($.str("^"), $.star(exports.space$noSkip))), $.eps));
exports.BitwiseOr = $.field($.pure("BitwiseOr"), "$", $.right((0, exports.inter)(exports.BitwiseXor, $.left($.str("|"), $.star(exports.space$noSkip))), $.eps));
exports.And = $.field($.pure("And"), "$", $.right((0, exports.inter)(exports.BitwiseOr, $.left($.str("&&"), $.star(exports.space$noSkip))), $.eps));
exports.Or = $.field($.pure("Or"), "$", $.right((0, exports.inter)(exports.And, $.left($.str("||"), $.star(exports.space$noSkip))), $.eps));
exports.Conditional = $.field($.pure("Conditional"), "$", $.field(exports.Or, "head", $.field($.star($.right($.left($.str("?"), $.star(exports.space$noSkip)), $.field(exports.Or, "thenBranch", $.right($.left($.str(":"), $.star(exports.space$noSkip)), $.field($.ref(() => exports.Conditional), "elseBranch", $.eps))))), "tail", $.eps)));
exports.expression = exports.Conditional;
exports.StatementLet = $.field($.pure("StatementLet"), "$", $.right(exports.$let, $.field(exports.Id, "name", $.field($.opt(exports.ascription), "type", $.right($.left($.str("="), $.star(exports.space$noSkip)), $.field(exports.expression, "init", $.right($.alt($.left($.str(";"), $.star(exports.space$noSkip)), $.lookPos($.left($.str("}"), $.star(exports.space$noSkip)))), $.eps)))))));
exports.$return = $.left($.right($.str("return"), $.right($.lookNeg(exports.idPart$noSkip), $.eps)), $.star(exports.space$noSkip));
exports.StatementReturn = $.field($.pure("StatementReturn"), "$", $.right(exports.$return, $.field($.opt(exports.expression), "expression", $.right($.alt($.left($.str(";"), $.star(exports.space$noSkip)), $.lookPos($.left($.str("}"), $.star(exports.space$noSkip)))), $.eps))));
exports.$if = $.left($.right($.str("if"), $.right($.lookNeg(exports.idPart$noSkip), $.eps)), $.star(exports.space$noSkip));
exports.$else = $.left($.right($.str("else"), $.right($.lookNeg(exports.idPart$noSkip), $.eps)), $.star(exports.space$noSkip));
exports.$while = $.left($.right($.str("while"), $.right($.lookNeg(exports.idPart$noSkip), $.eps)), $.star(exports.space$noSkip));
exports.repeat = $.left($.right($.str("repeat"), $.right($.lookNeg(exports.idPart$noSkip), $.eps)), $.star(exports.space$noSkip));
exports.$do = $.left($.right($.str("do"), $.right($.lookNeg(exports.idPart$noSkip), $.eps)), $.star(exports.space$noSkip));
exports.until = $.left($.right($.str("until"), $.right($.lookNeg(exports.idPart$noSkip), $.eps)), $.star(exports.space$noSkip));
exports.$try = $.left($.right($.str("try"), $.right($.lookNeg(exports.idPart$noSkip), $.eps)), $.star(exports.space$noSkip));
exports.$catch = $.left($.right($.str("catch"), $.right($.lookNeg(exports.idPart$noSkip), $.eps)), $.star(exports.space$noSkip));
exports.foreach = $.left($.right($.str("foreach"), $.right($.lookNeg(exports.idPart$noSkip), $.eps)), $.star(exports.space$noSkip));
exports.StatementExpression = $.field($.pure("StatementExpression"), "$", $.field(exports.expression, "expression", $.right($.alt($.left($.str(";"), $.star(exports.space$noSkip)), $.lookPos($.left($.str("}"), $.star(exports.space$noSkip)))), $.eps)));
exports.StatementAssign = $.field($.pure("StatementAssign"), "$", $.field(exports.expression, "left", $.field($.opt($.left($.regex("-+*/%|&^", false), $.star(exports.space$noSkip))), "operator", $.right($.left($.str("="), $.star(exports.space$noSkip)), $.field(exports.expression, "right", $.right($.alt($.left($.str(";"), $.star(exports.space$noSkip)), $.lookPos($.left($.str("}"), $.star(exports.space$noSkip)))), $.eps))))));
exports.StatementForEach = $.field($.pure("StatementForEach"), "$", $.right(exports.foreach, $.right($.left($.str("("), $.star(exports.space$noSkip)), $.field(exports.Id, "key", $.right($.left($.str(","), $.star(exports.space$noSkip)), $.field(exports.Id, "value", $.right($.left($.str("in"), $.star(exports.space$noSkip)), $.field(exports.expression, "expression", $.right($.left($.str(")"), $.star(exports.space$noSkip)), $.field($.ref(() => exports.statements), "body", $.eps))))))))));
exports.StatementTry = $.field($.pure("StatementTry"), "$", $.right(exports.$try, $.field($.ref(() => exports.statements), "body", $.field($.opt($.right(exports.$catch, $.right($.left($.str("("), $.star(exports.space$noSkip)), $.field(exports.Id, "name", $.right($.left($.str(")"), $.star(exports.space$noSkip)), $.field($.ref(() => exports.statements), "body2", $.eps)))))), "handler", $.eps))));
exports.StatementUntil = $.field($.pure("StatementUntil"), "$", $.right(exports.$do, $.field($.ref(() => exports.statements), "body", $.right(exports.until, $.field(exports.parens, "condition", $.right($.alt($.left($.str(";"), $.star(exports.space$noSkip)), $.lookPos($.left($.str("}"), $.star(exports.space$noSkip)))), $.eps))))));
exports.StatementRepeat = $.field($.pure("StatementRepeat"), "$", $.right(exports.repeat, $.field(exports.parens, "condition", $.field($.ref(() => exports.statements), "body", $.eps))));
exports.StatementWhile = $.field($.pure("StatementWhile"), "$", $.right(exports.$while, $.field(exports.parens, "condition", $.field($.ref(() => exports.statements), "body", $.eps))));
exports.StatementCondition = $.field($.pure("StatementCondition"), "$", $.right(exports.$if, $.field(exports.expression, "condition", $.field($.ref(() => exports.statements), "trueBranch", $.field($.opt($.right(exports.$else, $.right($.alt($.ref(() => exports.statements), $.ref(() => exports.StatementCondition)), $.eps))), "falseBranch", $.eps)))));
exports.StatementBlock = $.field($.pure("StatementBlock"), "$", $.field($.ref(() => exports.statements), "body", $.eps));
exports.statement = $.alt(exports.StatementLet, $.alt(exports.StatementBlock, $.alt(exports.StatementReturn, $.alt(exports.StatementCondition, $.alt(exports.StatementWhile, $.alt(exports.StatementRepeat, $.alt(exports.StatementUntil, $.alt(exports.StatementTry, $.alt(exports.StatementForEach, $.alt(exports.StatementExpression, exports.StatementAssign))))))))));
exports.statements = $.right($.left($.str("{"), $.star(exports.space$noSkip)), $.left($.star(exports.statement), $.left($.str("}"), $.star(exports.space$noSkip))));
exports.FunctionDefinition = $.field($.pure("FunctionDefinition"), "$", $.field(exports.statements, "body", $.eps));
exports.FunctionDeclaration = $.field($.pure("FunctionDeclaration"), "$", $.right($.stry($.alt($.left($.str(";"), $.star(exports.space$noSkip)), $.lookPos($.left($.str("}"), $.star(exports.space$noSkip))))), $.eps));
exports.Function = $.field($.pure("Function"), "$", $.field($.star(exports.functionAttribute), "attributes", $.right(exports.fun, $.field(exports.Id, "name", $.field(exports.parametersFormal, "parameters", $.field($.opt(exports.ascription), "type", $.field($.alt(exports.FunctionDefinition, exports.FunctionDeclaration), "body", $.eps)))))));
exports.AsmData = $.field($.pure("AsmData"), "$", $.right($.right($.left($.regex("xb", true), $.star(exports.space$noSkip)), $.right($.left($.str("{"), $.star(exports.space$noSkip)), $.right($.star(exports.hexDigit), $.right($.left($.str("}"), $.star(exports.space$noSkip)), $.eps)))), $.eps));
exports.multiLineComment = $.right($.left($.str("/*"), $.star(exports.space$noSkip)), $.right($.star($.right($.lookNeg($.left($.str("*/"), $.star(exports.space$noSkip))), $.right($.left($.any, $.star(exports.space$noSkip)), $.eps))), $.right($.left($.str("*/"), $.star(exports.space$noSkip)), $.eps)));
exports.singleLineComment = $.right($.left($.str("//"), $.star(exports.space$noSkip)), $.right($.star($.left($.regex("^\\r\\n", false), $.star(exports.space$noSkip))), $.eps));
exports.comment = $.alt(exports.multiLineComment, exports.singleLineComment);
exports.space = $.alt($.left($.regex(" \\t\\r\\n", false), $.star(exports.space$noSkip)), exports.comment);
exports.AsmAny = $.field($.pure("AsmAny"), "$", $.right($.right($.lookNeg(exports.comment), $.right($.plus($.right($.lookNeg(exports.space), $.right($.lookNeg($.left($.str("}"), $.star(exports.space$noSkip))), $.right($.left($.any, $.star(exports.space$noSkip)), $.eps)))), $.eps)), $.eps));
exports.asmInstruction = $.alt(exports.AsmData, exports.AsmAny);
exports.AsmFunction = $.field($.pure("AsmFunction"), "$", $.right($.left($.str("asm"), $.star(exports.space$noSkip)), $.field($.opt($.right($.left($.str("("), $.star(exports.space$noSkip)), $.field($.star(exports.Id), "ids", $.field($.opt($.right($.left($.str("->"), $.star(exports.space$noSkip)), $.right($.plus(exports.IntegerLiteralDec), $.eps))), "to", $.right($.left($.str(")"), $.star(exports.space$noSkip)), $.eps))))), "shuffle", $.field($.star(exports.functionAttribute), "attributes", $.right(exports.fun, $.field(exports.Id, "name", $.field(exports.parametersFormal, "parameters", $.field($.opt(exports.ascription), "returnType", $.right($.left($.str("{"), $.star(exports.space$noSkip)), $.field($.plus(exports.asmInstruction), "instructions", $.right($.left($.str("}"), $.star(exports.space$noSkip)), $.eps)))))))))));
exports.funcQuotedId = $.right($.left($.str("`"), $.star(exports.space$noSkip)), $.right($.plus($.right($.lookNeg($.left($.regex("`\\n", false), $.star(exports.space$noSkip))), $.right($.left($.any, $.star(exports.space$noSkip)), $.eps))), $.right($.left($.str("`"), $.star(exports.space$noSkip)), $.eps)));
exports.notUnderscore = $.left($.str("_"), $.star(exports.space$noSkip));
exports.notArithOperator = $.alt($.left($.str("+"), $.star(exports.space$noSkip)), $.alt($.left($.str("-"), $.star(exports.space$noSkip)), $.alt($.left($.str("*"), $.star(exports.space$noSkip)), $.alt($.left($.str("/%"), $.star(exports.space$noSkip)), $.alt($.left($.str("/"), $.star(exports.space$noSkip)), $.alt($.left($.str("%"), $.star(exports.space$noSkip)), $.alt($.left($.str("~/"), $.star(exports.space$noSkip)), $.alt($.left($.str("^/"), $.star(exports.space$noSkip)), $.alt($.left($.str("~%"), $.star(exports.space$noSkip)), $.left($.str("^%"), $.star(exports.space$noSkip)))))))))));
exports.notComparisonOperator = $.alt($.left($.str("<=>"), $.star(exports.space$noSkip)), $.alt($.left($.str("<="), $.star(exports.space$noSkip)), $.alt($.left($.str("<"), $.star(exports.space$noSkip)), $.alt($.left($.str(">="), $.star(exports.space$noSkip)), $.alt($.left($.str(">"), $.star(exports.space$noSkip)), $.alt($.left($.str("!="), $.star(exports.space$noSkip)), $.left($.str("=="), $.star(exports.space$noSkip))))))));
exports.notBitwiseOperator = $.alt($.left($.str("~>>"), $.star(exports.space$noSkip)), $.alt($.left($.str("~"), $.star(exports.space$noSkip)), $.alt($.left($.str("^>>"), $.star(exports.space$noSkip)), $.alt($.left($.str("^"), $.star(exports.space$noSkip)), $.alt($.left($.str("&"), $.star(exports.space$noSkip)), $.alt($.left($.str("|"), $.star(exports.space$noSkip)), $.alt($.left($.str("<<"), $.star(exports.space$noSkip)), $.left($.str(">>"), $.star(exports.space$noSkip)))))))));
exports.notAssignOperator = $.alt($.left($.str("="), $.star(exports.space$noSkip)), $.alt($.left($.str("+="), $.star(exports.space$noSkip)), $.alt($.left($.str("-="), $.star(exports.space$noSkip)), $.alt($.left($.str("*="), $.star(exports.space$noSkip)), $.alt($.left($.str("/="), $.star(exports.space$noSkip)), $.alt($.left($.str("%="), $.star(exports.space$noSkip)), $.alt($.left($.str("~>>="), $.star(exports.space$noSkip)), $.alt($.left($.str("~/="), $.star(exports.space$noSkip)), $.alt($.left($.str("~%="), $.star(exports.space$noSkip)), $.alt($.left($.str("^>>="), $.star(exports.space$noSkip)), $.alt($.left($.str("^/="), $.star(exports.space$noSkip)), $.alt($.left($.str("^%="), $.star(exports.space$noSkip)), $.alt($.left($.str("^="), $.star(exports.space$noSkip)), $.alt($.left($.str("<<="), $.star(exports.space$noSkip)), $.alt($.left($.str(">>="), $.star(exports.space$noSkip)), $.alt($.left($.str("&="), $.star(exports.space$noSkip)), $.left($.str("|="), $.star(exports.space$noSkip))))))))))))))))));
exports.notDelimiter = $.alt($.left($.str("["), $.star(exports.space$noSkip)), $.alt($.left($.str("]"), $.star(exports.space$noSkip)), $.alt($.left($.str("{"), $.star(exports.space$noSkip)), $.alt($.left($.str("}"), $.star(exports.space$noSkip)), $.alt($.left($.str("?"), $.star(exports.space$noSkip)), $.left($.str(":"), $.star(exports.space$noSkip)))))));
exports.notControlKeyword = $.alt($.left($.str("return"), $.star(exports.space$noSkip)), $.alt($.left($.str("var"), $.star(exports.space$noSkip)), $.alt($.left($.str("repeat"), $.star(exports.space$noSkip)), $.alt($.left($.str("do"), $.star(exports.space$noSkip)), $.alt($.left($.str("while"), $.star(exports.space$noSkip)), $.alt($.left($.str("until"), $.star(exports.space$noSkip)), $.alt($.left($.str("try"), $.star(exports.space$noSkip)), $.alt($.left($.str("catch"), $.star(exports.space$noSkip)), $.alt($.left($.str("ifnot"), $.star(exports.space$noSkip)), $.alt($.left($.str("if"), $.star(exports.space$noSkip)), $.alt($.left($.str("then"), $.star(exports.space$noSkip)), $.alt($.left($.str("elseifnot"), $.star(exports.space$noSkip)), $.alt($.left($.str("elseif"), $.star(exports.space$noSkip)), $.left($.str("else"), $.star(exports.space$noSkip)))))))))))))));
exports.notTypeKeyword = $.alt($.left($.str("int"), $.star(exports.space$noSkip)), $.alt($.left($.str("cell"), $.star(exports.space$noSkip)), $.alt($.left($.str("builder"), $.star(exports.space$noSkip)), $.alt($.left($.str("slice"), $.star(exports.space$noSkip)), $.alt($.left($.str("cont"), $.star(exports.space$noSkip)), $.alt($.left($.str("tuple"), $.star(exports.space$noSkip)), $.alt($.left($.str("type"), $.star(exports.space$noSkip)), $.alt($.left($.str("->"), $.star(exports.space$noSkip)), $.left($.str("forall"), $.star(exports.space$noSkip))))))))));
exports.notKeyword = $.alt($.left($.str("extern"), $.star(exports.space$noSkip)), $.alt($.left($.str("global"), $.star(exports.space$noSkip)), $.alt($.left($.str("asm"), $.star(exports.space$noSkip)), $.alt($.left($.str("impure"), $.star(exports.space$noSkip)), $.alt($.left($.str("inline_ref"), $.star(exports.space$noSkip)), $.alt($.left($.str("inline"), $.star(exports.space$noSkip)), $.alt($.left($.str("auto_apply"), $.star(exports.space$noSkip)), $.alt($.left($.str("method_id"), $.star(exports.space$noSkip)), $.alt($.left($.str("operator"), $.star(exports.space$noSkip)), $.alt($.left($.str("infixl"), $.star(exports.space$noSkip)), $.alt($.left($.str("infixr"), $.star(exports.space$noSkip)), $.alt($.left($.str("infix"), $.star(exports.space$noSkip)), $.left($.str("const"), $.star(exports.space$noSkip))))))))))))));
exports.notDirective = $.alt($.left($.str("#include"), $.star(exports.space$noSkip)), $.left($.str("#pragma"), $.star(exports.space$noSkip)));
exports.notDecimalNumber = $.right($.opt($.left($.str("-"), $.star(exports.space$noSkip))), $.right($.plus(exports.digit), $.eps));
exports.notHexadecimalNumber = $.right($.opt($.left($.str("-"), $.star(exports.space$noSkip))), $.right($.left($.str("0x"), $.star(exports.space$noSkip)), $.right($.plus(exports.hexDigit), $.eps)));
exports.funcInvalidId = $.alt(exports.notUnderscore, $.alt(exports.notArithOperator, $.alt(exports.notComparisonOperator, $.alt(exports.notBitwiseOperator, $.alt(exports.notAssignOperator, $.alt(exports.notDelimiter, $.alt(exports.notControlKeyword, $.alt(exports.notTypeKeyword, $.alt(exports.notKeyword, $.alt(exports.notDirective, $.alt(exports.notDecimalNumber, exports.notHexadecimalNumber)))))))))));
exports.whiteSpace = $.left($.regex(" \\t\\r\\n", false), $.star(exports.space$noSkip));
exports.funcPlainId = $.right($.lookNeg($.right(exports.funcInvalidId, $.right($.left($.str(")"), $.star(exports.space$noSkip)), $.eps))), $.right($.plus($.right($.lookNeg($.alt(exports.whiteSpace, $.left($.regex("()[\\],.;~", false), $.star(exports.space$noSkip)))), $.right($.left($.any, $.star(exports.space$noSkip)), $.eps))), $.eps));
exports.funcId = $.right($.lookNeg($.alt($.left($.str("\""), $.star(exports.space$noSkip)), $.left($.str("{-"), $.star(exports.space$noSkip)))), $.right($.opt($.alt($.left($.str("."), $.star(exports.space$noSkip)), $.left($.str("~"), $.star(exports.space$noSkip)))), $.right($.alt(exports.funcQuotedId, exports.funcPlainId), $.eps)));
exports.$native = $.left($.right($.str("native"), $.right($.lookNeg(exports.idPart$noSkip), $.eps)), $.star(exports.space$noSkip));
exports.NativeFunctionDecl = $.field($.pure("NativeFunctionDecl"), "$", $.right($.left($.str("@name"), $.star(exports.space$noSkip)), $.right($.left($.str("("), $.star(exports.space$noSkip)), $.field(exports.funcId, "nativeName", $.right($.left($.str(")"), $.star(exports.space$noSkip)), $.field($.star(exports.functionAttribute), "attributes", $.right(exports.$native, $.field(exports.Id, "name", $.field(exports.parametersFormal, "parameters", $.field($.opt(exports.ascription), "returnType", $.right($.left($.str(";"), $.star(exports.space$noSkip)), $.eps)))))))))));
exports.$const = $.left($.right($.str("const"), $.right($.lookNeg(exports.idPart$noSkip), $.eps)), $.star(exports.space$noSkip));
exports.ConstantDefinition = $.field($.pure("ConstantDefinition"), "$", $.right($.left($.str("="), $.star(exports.space$noSkip)), $.field(exports.expression, "expression", $.right($.alt($.left($.str(";"), $.star(exports.space$noSkip)), $.lookPos($.left($.str("}"), $.star(exports.space$noSkip)))), $.eps))));
exports.ConstantDeclaration = $.field($.pure("ConstantDeclaration"), "$", $.right($.stry($.alt($.left($.str(";"), $.star(exports.space$noSkip)), $.lookPos($.left($.str("}"), $.star(exports.space$noSkip))))), $.eps));
exports.Constant = $.field($.pure("Constant"), "$", $.field($.star($.alt(exports.virtual, $.alt(exports.override, exports.$abstract))), "attributes", $.right(exports.$const, $.field(exports.Id, "name", $.field(exports.ascription, "type", $.field($.alt(exports.ConstantDefinition, exports.ConstantDeclaration), "body", $.eps))))));
exports.FieldDecl = $.field($.pure("FieldDecl"), "$", $.field(exports.Id, "name", $.field(exports.ascription, "type", $.field($.opt($.right(exports.$as, exports.Id)), "as", $.field($.opt($.right($.left($.str("="), $.star(exports.space$noSkip)), exports.expression)), "expression", $.eps)))));
exports.structFields = $.left($.opt((0, exports.inter)(exports.FieldDecl, $.left($.str(";"), $.star(exports.space$noSkip)))), $.opt($.left($.str(";"), $.star(exports.space$noSkip))));
exports.StructDecl = $.field($.pure("StructDecl"), "$", $.right($.left($.str("struct"), $.star(exports.space$noSkip)), $.field(exports.TypeId, "name", $.right($.left($.str("{"), $.star(exports.space$noSkip)), $.field(exports.structFields, "fields", $.right($.left($.str("}"), $.star(exports.space$noSkip)), $.eps))))));
exports.MessageDecl = $.field($.pure("MessageDecl"), "$", $.right($.left($.str("message"), $.star(exports.space$noSkip)), $.field($.opt($.right($.left($.str("("), $.star(exports.space$noSkip)), $.left(exports.integerLiteral, $.left($.str(")"), $.star(exports.space$noSkip))))), "id", $.field(exports.TypeId, "name", $.right($.left($.str("{"), $.star(exports.space$noSkip)), $.field(exports.structFields, "fields", $.right($.left($.str("}"), $.star(exports.space$noSkip)), $.eps)))))));
exports.ContractAttribute = $.field($.pure("ContractAttribute"), "$", $.right($.right($.left($.str("@interface"), $.star(exports.space$noSkip)), $.right($.left($.str("("), $.star(exports.space$noSkip)), $.right(exports.StringLiteral, $.right($.left($.str(")"), $.star(exports.space$noSkip)), $.eps)))), $.eps));
exports.contract = $.left($.right($.str("contract"), $.right($.lookNeg(exports.idPart$noSkip), $.eps)), $.star(exports.space$noSkip));
exports.$with = $.left($.right($.str("with"), $.right($.lookNeg(exports.idPart$noSkip), $.eps)), $.star(exports.space$noSkip));
exports.InheritedTraits = $.field($.pure("InheritedTraits"), "$", $.field((0, exports.inter)(exports.Id, $.left($.str(","), $.star(exports.space$noSkip))), "ids", $.right($.opt($.left($.str(","), $.star(exports.space$noSkip))), $.eps)));
exports.ContractInit = $.field($.pure("ContractInit"), "$", $.right($.right($.left($.str("init"), $.star(exports.space$noSkip)), $.right(exports.parametersFormal, $.right(exports.statements, $.eps))), $.eps));
exports.receive = $.left($.right($.str("receive"), $.right($.lookNeg(exports.idPart$noSkip), $.eps)), $.star(exports.space$noSkip));
exports.receiverParam = $.opt($.alt(exports.Parameter, exports.StringLiteral));
exports.ReceiverReceive = $.field($.pure("ReceiverReceive"), "$", $.right(exports.receive, $.right($.left($.str("("), $.star(exports.space$noSkip)), $.field(exports.receiverParam, "param", $.right($.left($.str(")"), $.star(exports.space$noSkip)), $.field(exports.statements, "body", $.eps))))));
exports.external = $.left($.right($.str("external"), $.right($.lookNeg(exports.idPart$noSkip), $.eps)), $.star(exports.space$noSkip));
exports.ReceiverExternal = $.field($.pure("ReceiverExternal"), "$", $.right(exports.external, $.right($.left($.str("("), $.star(exports.space$noSkip)), $.field(exports.receiverParam, "param", $.right($.left($.str(")"), $.star(exports.space$noSkip)), $.field(exports.statements, "body", $.eps))))));
exports.ReceiverBounced = $.field($.pure("ReceiverBounced"), "$", $.right($.left($.str("bounced"), $.star(exports.space$noSkip)), $.right($.left($.str("("), $.star(exports.space$noSkip)), $.field(exports.Parameter, "param", $.right($.left($.str(")"), $.star(exports.space$noSkip)), $.field(exports.statements, "body", $.eps))))));
exports.receiver = $.alt(exports.ReceiverReceive, $.alt(exports.ReceiverExternal, exports.ReceiverBounced));
exports.storageVar = $.left(exports.FieldDecl, $.alt($.left($.str(";"), $.star(exports.space$noSkip)), $.lookPos($.left($.str("}"), $.star(exports.space$noSkip)))));
exports.contractItemDecl = $.alt(exports.ContractInit, $.alt(exports.receiver, $.alt(exports.Function, $.alt(exports.Constant, exports.storageVar))));
exports.Contract = $.field($.pure("Contract"), "$", $.field($.star(exports.ContractAttribute), "attributes", $.right(exports.contract, $.field(exports.Id, "name", $.field($.opt($.right(exports.$with, exports.InheritedTraits)), "traits", $.right($.left($.str("{"), $.star(exports.space$noSkip)), $.field($.star(exports.contractItemDecl), "items", $.right($.left($.str("}"), $.star(exports.space$noSkip)), $.eps))))))));
exports.trait = $.left($.right($.str("trait"), $.right($.lookNeg(exports.idPart$noSkip), $.eps)), $.star(exports.space$noSkip));
exports.traitItemDecl = $.alt(exports.receiver, $.alt(exports.Function, $.alt(exports.Constant, exports.storageVar)));
exports.Trait = $.field($.pure("Trait"), "$", $.right($.right($.star(exports.ContractAttribute), $.right(exports.trait, $.right(exports.Id, $.right($.opt($.right(exports.$with, $.right(exports.InheritedTraits, $.eps))), $.right($.left($.str("{"), $.star(exports.space$noSkip)), $.right($.star(exports.traitItemDecl), $.right($.left($.str("}"), $.star(exports.space$noSkip)), $.eps))))))), $.eps));
exports.moduleItem = $.alt(exports.PrimitiveTypeDecl, $.alt(exports.Function, $.alt(exports.AsmFunction, $.alt(exports.NativeFunctionDecl, $.alt(exports.Constant, $.alt(exports.StructDecl, $.alt(exports.MessageDecl, $.alt(exports.Contract, exports.Trait))))))));
exports.Module = $.field($.pure("Module"), "$", $.field($.star(exports.Import), "imports", $.field($.star(exports.moduleItem), "items", $.eps)));
exports.StringLiteral$noSkip = $.field($.pure("StringLiteral"), "$", $.field($.stry($.right($.str("\""), $.right($.star($.alt(exports.nonQuoteOrBackslashChar$noSkip, exports.escapeSequence$noSkip)), $.right($.str("\""), $.eps)))), "value", $.eps));
exports.Import$noSkip = $.field($.pure("Import"), "$", $.right(exports.$import$noSkip, $.field(exports.StringLiteral$noSkip, "path", $.right($.str(";"), $.eps))));
exports.TypeId$noSkip = $.field($.pure("TypeId"), "$", $.field($.stry($.right($.regex("A-Z", false), $.right($.star($.regex("a-z0-9_", true)), $.eps))), "name", $.eps));
exports.PrimitiveTypeDecl$noSkip = $.field($.pure("PrimitiveTypeDecl"), "$", $.right(exports.primitive$noSkip, $.field(exports.TypeId$noSkip, "name", $.right($.str(";"), $.eps))));
exports.functionAttribute$noSkip = $.alt($.str("get"), $.alt(exports.mutates$noSkip, $.alt(exports.$extends$noSkip, $.alt(exports.virtual$noSkip, $.alt(exports.override$noSkip, $.alt(exports.inline$noSkip, exports.$abstract$noSkip))))));
exports.Id$noSkip = $.field($.pure("Id"), "$", $.field($.stry($.right($.lookNeg(exports.reservedWord$noSkip), $.right($.regex("a-z_", true), $.right($.star(exports.idPart$noSkip), $.eps)))), "name", $.eps));
const inter$noSkip = (A, B) => $.field($.ref(() => A), "head", $.field($.star($.field($.ref(() => B), "op", $.field($.ref(() => A), "right", $.eps))), "tail", $.eps));
exports.inter$noSkip = inter$noSkip;
exports.TypeOptional$noSkip = $.field($.pure("TypeOptional"), "$", $.field(exports.TypeId$noSkip, "child", $.right($.str("?"), $.eps)));
exports.TypeRegular$noSkip = $.field($.pure("TypeRegular"), "$", $.field(exports.TypeId$noSkip, "child", $.eps));
exports.TypeMap$noSkip = $.field($.pure("TypeMap"), "$", $.right(exports.map$noSkip, $.right($.str("<"), $.field(exports.TypeId$noSkip, "key", $.field($.opt($.right(exports.$as$noSkip, exports.Id$noSkip)), "keyAs", $.right($.str(","), $.field(exports.TypeId$noSkip, "value", $.field($.opt($.right(exports.$as$noSkip, exports.Id$noSkip)), "valueAs", $.right($.str(">"), $.eps)))))))));
exports.TypeBounced$noSkip = $.field($.pure("TypeBounced"), "$", $.right($.str("bounced"), $.right($.str("<"), $.field(exports.TypeId$noSkip, "child", $.right($.str(">"), $.eps)))));
exports.$type$noSkip = $.alt(exports.TypeOptional$noSkip, $.alt(exports.TypeRegular$noSkip, $.alt(exports.TypeMap$noSkip, exports.TypeBounced$noSkip)));
exports.ascription$noSkip = $.right($.str(":"), exports.$type$noSkip);
exports.Parameter$noSkip = $.field($.pure("Parameter"), "$", $.field(exports.Id$noSkip, "name", $.field(exports.ascription$noSkip, "type", $.eps)));
exports.parametersFormal$noSkip = $.right($.str("("), $.left($.opt((0, exports.inter$noSkip)(exports.Parameter$noSkip, $.str(","))), $.left($.opt($.str(",")), $.str(")"))));
exports.IntegerLiteralHex$noSkip = $.field($.pure("IntegerLiteralHex"), "$", $.right($.str("0"), $.right($.regex("x", true), $.field($.right(exports.hexDigit$noSkip, $.right($.star($.right($.opt($.str("_")), $.right(exports.hexDigit$noSkip, $.eps))), $.eps)), "digits", $.eps))));
exports.IntegerLiteralBin$noSkip = $.field($.pure("IntegerLiteralBin"), "$", $.right($.str("0"), $.right($.regex("b", true), $.field($.right($.regex("01", false), $.right($.star($.right($.opt($.str("_")), $.right($.regex("01", false), $.eps))), $.eps)), "digits", $.eps))));
exports.IntegerLiteralOct$noSkip = $.field($.pure("IntegerLiteralOct"), "$", $.right($.str("0"), $.right($.regex("o", true), $.field($.right($.regex("0-7", false), $.right($.star($.right($.opt($.str("_")), $.right($.regex("0-7", false), $.eps))), $.eps)), "digits", $.eps))));
exports.digit$noSkip = $.regex("0-9", false);
exports.IntegerLiteralDec$noSkip = $.field($.pure("IntegerLiteralDec"), "$", $.field($.stry($.alt($.right($.regex("1-9", false), $.right($.star($.right($.opt($.str("_")), $.right(exports.digit$noSkip, $.eps))), $.eps)), $.right($.str("0"), $.right($.star(exports.digit$noSkip), $.eps)))), "digits", $.eps));
exports.integerLiteral$noSkip = $.alt(exports.IntegerLiteralHex$noSkip, $.alt(exports.IntegerLiteralBin$noSkip, $.alt(exports.IntegerLiteralOct$noSkip, exports.IntegerLiteralDec$noSkip)));
exports.BoolLiteral$noSkip = $.field($.pure("BoolLiteral"), "$", $.field($.alt($.str("true"), $.str("false")), "value", $.right($.lookNeg(exports.idPart$noSkip), $.eps)));
exports.SuffixUnboxNotNull$noSkip = $.field($.pure("SuffixUnboxNotNull"), "$", $.right($.str("!!"), $.eps));
exports.SuffixFieldAccess$noSkip = $.field($.pure("SuffixFieldAccess"), "$", $.right($.str("."), $.field(exports.Id$noSkip, "name", $.eps)));
exports.SuffixCall$noSkip = $.field($.pure("SuffixCall"), "$", $.field($.ref(() => exports.parametersFactual$noSkip), "params", $.eps));
exports.suffix$noSkip = $.alt(exports.SuffixUnboxNotNull$noSkip, $.alt(exports.SuffixCall$noSkip, exports.SuffixFieldAccess$noSkip));
exports.parametersFactual$noSkip = $.right($.str("("), $.left($.opt((0, exports.inter$noSkip)($.ref(() => exports.expression$noSkip), $.str(","))), $.left($.opt($.str(",")), $.str(")"))));
exports.InitOf$noSkip = $.field($.pure("InitOf"), "$", $.right(exports.initOf$noSkip, $.field(exports.Id$noSkip, "name", $.field(exports.parametersFactual$noSkip, "params", $.eps))));
exports.structFieldInitializer$noSkip = $.field(exports.Id$noSkip, "name", $.field($.opt($.right($.str(":"), $.ref(() => exports.expression$noSkip))), "init", $.eps));
exports.StructInstance$noSkip = $.field($.pure("StructInstance"), "$", $.right(exports.TypeId$noSkip, $.right($.str("{"), $.field($.opt((0, exports.inter$noSkip)(exports.structFieldInitializer$noSkip, $.str(","))), "fields", $.right($.opt($.str(",")), $.right($.str("}"), $.eps))))));
exports.parens$noSkip = $.right($.str("("), $.left($.ref(() => exports.expression$noSkip), $.str(")")));
exports.Parens$noSkip = $.field($.pure("Parens"), "$", $.right(exports.parens$noSkip, $.eps));
exports.primary$noSkip = $.alt(exports.Parens$noSkip, $.alt(exports.StructInstance$noSkip, $.alt(exports.integerLiteral$noSkip, $.alt(exports.BoolLiteral$noSkip, $.alt(exports.InitOf$noSkip, $.alt(exports.$null$noSkip, $.alt(exports.StringLiteral$noSkip, exports.Id$noSkip)))))));
exports.Suffix$noSkip = $.field($.pure("Suffix"), "$", $.field(exports.primary$noSkip, "expression", $.field($.star(exports.suffix$noSkip), "suffixes", $.eps)));
exports.Unary$noSkip = $.field($.pure("Unary"), "$", $.field($.star($.regex("-+!~", false)), "prefixes", $.field(exports.Suffix$noSkip, "expression", $.eps)));
exports.Mul$noSkip = $.field($.pure("Mul"), "$", $.right((0, exports.inter$noSkip)(exports.Unary$noSkip, $.regex("*/%", false)), $.eps));
exports.Add$noSkip = $.field($.pure("Add"), "$", $.right((0, exports.inter$noSkip)(exports.Mul$noSkip, $.alt($.right($.str("+"), $.right($.lookNeg($.str("+")), $.eps)), $.right($.str("-"), $.right($.lookNeg($.str("-")), $.eps)))), $.eps));
exports.BitwiseShift$noSkip = $.field($.pure("BitwiseShift"), "$", $.right((0, exports.inter$noSkip)(exports.Add$noSkip, $.alt($.str("<<"), $.str(">>"))), $.eps));
exports.Compare$noSkip = $.field($.pure("Compare"), "$", $.right((0, exports.inter$noSkip)(exports.BitwiseShift$noSkip, $.alt($.str("<="), $.alt($.str("<"), $.alt($.str(">="), $.str(">"))))), $.eps));
exports.Equality$noSkip = $.field($.pure("Equality"), "$", $.right((0, exports.inter$noSkip)(exports.Compare$noSkip, $.alt($.str("!="), $.str("=="))), $.eps));
exports.BitwiseAnd$noSkip = $.field($.pure("BitwiseAnd"), "$", $.right((0, exports.inter$noSkip)(exports.Equality$noSkip, $.str("&")), $.eps));
exports.BitwiseXor$noSkip = $.field($.pure("BitwiseXor"), "$", $.right((0, exports.inter$noSkip)(exports.BitwiseAnd$noSkip, $.str("^")), $.eps));
exports.BitwiseOr$noSkip = $.field($.pure("BitwiseOr"), "$", $.right((0, exports.inter$noSkip)(exports.BitwiseXor$noSkip, $.str("|")), $.eps));
exports.And$noSkip = $.field($.pure("And"), "$", $.right((0, exports.inter$noSkip)(exports.BitwiseOr$noSkip, $.str("&&")), $.eps));
exports.Or$noSkip = $.field($.pure("Or"), "$", $.right((0, exports.inter$noSkip)(exports.And$noSkip, $.str("||")), $.eps));
exports.Conditional$noSkip = $.field($.pure("Conditional"), "$", $.field(exports.Or$noSkip, "head", $.field($.star($.right($.str("?"), $.field(exports.Or$noSkip, "thenBranch", $.right($.str(":"), $.field($.ref(() => exports.Conditional$noSkip), "elseBranch", $.eps))))), "tail", $.eps)));
exports.expression$noSkip = exports.Conditional$noSkip;
exports.StatementLet$noSkip = $.field($.pure("StatementLet"), "$", $.right(exports.$let$noSkip, $.field(exports.Id$noSkip, "name", $.field($.opt(exports.ascription$noSkip), "type", $.right($.str("="), $.field(exports.expression$noSkip, "init", $.right($.alt($.str(";"), $.lookPos($.str("}"))), $.eps)))))));
exports.StatementReturn$noSkip = $.field($.pure("StatementReturn"), "$", $.right(exports.$return$noSkip, $.field($.opt(exports.expression$noSkip), "expression", $.right($.alt($.str(";"), $.lookPos($.str("}"))), $.eps))));
exports.StatementExpression$noSkip = $.field($.pure("StatementExpression"), "$", $.field(exports.expression$noSkip, "expression", $.right($.alt($.str(";"), $.lookPos($.str("}"))), $.eps)));
exports.StatementAssign$noSkip = $.field($.pure("StatementAssign"), "$", $.field(exports.expression$noSkip, "left", $.field($.opt($.regex("-+*/%|&^", false)), "operator", $.right($.str("="), $.field(exports.expression$noSkip, "right", $.right($.alt($.str(";"), $.lookPos($.str("}"))), $.eps))))));
exports.StatementForEach$noSkip = $.field($.pure("StatementForEach"), "$", $.right(exports.foreach$noSkip, $.right($.str("("), $.field(exports.Id$noSkip, "key", $.right($.str(","), $.field(exports.Id$noSkip, "value", $.right($.str("in"), $.field(exports.expression$noSkip, "expression", $.right($.str(")"), $.field($.ref(() => exports.statements$noSkip), "body", $.eps))))))))));
exports.StatementTry$noSkip = $.field($.pure("StatementTry"), "$", $.right(exports.$try$noSkip, $.field($.ref(() => exports.statements$noSkip), "body", $.field($.opt($.right(exports.$catch$noSkip, $.right($.str("("), $.field(exports.Id$noSkip, "name", $.right($.str(")"), $.field($.ref(() => exports.statements$noSkip), "body2", $.eps)))))), "handler", $.eps))));
exports.StatementUntil$noSkip = $.field($.pure("StatementUntil"), "$", $.right(exports.$do$noSkip, $.field($.ref(() => exports.statements$noSkip), "body", $.right(exports.until$noSkip, $.field(exports.parens$noSkip, "condition", $.right($.alt($.str(";"), $.lookPos($.str("}"))), $.eps))))));
exports.StatementRepeat$noSkip = $.field($.pure("StatementRepeat"), "$", $.right(exports.repeat$noSkip, $.field(exports.parens$noSkip, "condition", $.field($.ref(() => exports.statements$noSkip), "body", $.eps))));
exports.StatementWhile$noSkip = $.field($.pure("StatementWhile"), "$", $.right(exports.$while$noSkip, $.field(exports.parens$noSkip, "condition", $.field($.ref(() => exports.statements$noSkip), "body", $.eps))));
exports.StatementCondition$noSkip = $.field($.pure("StatementCondition"), "$", $.right(exports.$if$noSkip, $.field(exports.expression$noSkip, "condition", $.field($.ref(() => exports.statements$noSkip), "trueBranch", $.field($.opt($.right(exports.$else$noSkip, $.right($.alt($.ref(() => exports.statements$noSkip), $.ref(() => exports.StatementCondition$noSkip)), $.eps))), "falseBranch", $.eps)))));
exports.StatementBlock$noSkip = $.field($.pure("StatementBlock"), "$", $.field($.ref(() => exports.statements$noSkip), "body", $.eps));
exports.statement$noSkip = $.alt(exports.StatementLet$noSkip, $.alt(exports.StatementBlock$noSkip, $.alt(exports.StatementReturn$noSkip, $.alt(exports.StatementCondition$noSkip, $.alt(exports.StatementWhile$noSkip, $.alt(exports.StatementRepeat$noSkip, $.alt(exports.StatementUntil$noSkip, $.alt(exports.StatementTry$noSkip, $.alt(exports.StatementForEach$noSkip, $.alt(exports.StatementExpression$noSkip, exports.StatementAssign$noSkip))))))))));
exports.statements$noSkip = $.right($.str("{"), $.left($.star(exports.statement$noSkip), $.str("}")));
exports.FunctionDefinition$noSkip = $.field($.pure("FunctionDefinition"), "$", $.field(exports.statements$noSkip, "body", $.eps));
exports.FunctionDeclaration$noSkip = $.field($.pure("FunctionDeclaration"), "$", $.right($.stry($.alt($.str(";"), $.lookPos($.str("}")))), $.eps));
exports.Function$noSkip = $.field($.pure("Function"), "$", $.field($.star(exports.functionAttribute$noSkip), "attributes", $.right(exports.fun$noSkip, $.field(exports.Id$noSkip, "name", $.field(exports.parametersFormal$noSkip, "parameters", $.field($.opt(exports.ascription$noSkip), "type", $.field($.alt(exports.FunctionDefinition$noSkip, exports.FunctionDeclaration$noSkip), "body", $.eps)))))));
exports.AsmData$noSkip = $.field($.pure("AsmData"), "$", $.right($.right($.regex("xb", true), $.right($.str("{"), $.right($.star(exports.hexDigit$noSkip), $.right($.str("}"), $.eps)))), $.eps));
exports.AsmAny$noSkip = $.field($.pure("AsmAny"), "$", $.right($.right($.lookNeg(exports.comment$noSkip), $.right($.plus($.right($.lookNeg(exports.space$noSkip), $.right($.lookNeg($.str("}")), $.right($.any, $.eps)))), $.eps)), $.eps));
exports.asmInstruction$noSkip = $.alt(exports.AsmData$noSkip, exports.AsmAny$noSkip);
exports.AsmFunction$noSkip = $.field($.pure("AsmFunction"), "$", $.right($.str("asm"), $.field($.opt($.right($.str("("), $.field($.star(exports.Id$noSkip), "ids", $.field($.opt($.right($.str("->"), $.right($.plus(exports.IntegerLiteralDec$noSkip), $.eps))), "to", $.right($.str(")"), $.eps))))), "shuffle", $.field($.star(exports.functionAttribute$noSkip), "attributes", $.right(exports.fun$noSkip, $.field(exports.Id$noSkip, "name", $.field(exports.parametersFormal$noSkip, "parameters", $.field($.opt(exports.ascription$noSkip), "returnType", $.right($.str("{"), $.field($.plus(exports.asmInstruction$noSkip), "instructions", $.right($.str("}"), $.eps)))))))))));
exports.funcQuotedId$noSkip = $.right($.str("`"), $.right($.plus($.right($.lookNeg($.regex("`\\n", false)), $.right($.any, $.eps))), $.right($.str("`"), $.eps)));
exports.notUnderscore$noSkip = $.str("_");
exports.notArithOperator$noSkip = $.alt($.str("+"), $.alt($.str("-"), $.alt($.str("*"), $.alt($.str("/%"), $.alt($.str("/"), $.alt($.str("%"), $.alt($.str("~/"), $.alt($.str("^/"), $.alt($.str("~%"), $.str("^%"))))))))));
exports.notComparisonOperator$noSkip = $.alt($.str("<=>"), $.alt($.str("<="), $.alt($.str("<"), $.alt($.str(">="), $.alt($.str(">"), $.alt($.str("!="), $.str("==")))))));
exports.notBitwiseOperator$noSkip = $.alt($.str("~>>"), $.alt($.str("~"), $.alt($.str("^>>"), $.alt($.str("^"), $.alt($.str("&"), $.alt($.str("|"), $.alt($.str("<<"), $.str(">>"))))))));
exports.notAssignOperator$noSkip = $.alt($.str("="), $.alt($.str("+="), $.alt($.str("-="), $.alt($.str("*="), $.alt($.str("/="), $.alt($.str("%="), $.alt($.str("~>>="), $.alt($.str("~/="), $.alt($.str("~%="), $.alt($.str("^>>="), $.alt($.str("^/="), $.alt($.str("^%="), $.alt($.str("^="), $.alt($.str("<<="), $.alt($.str(">>="), $.alt($.str("&="), $.str("|=")))))))))))))))));
exports.notDelimiter$noSkip = $.alt($.str("["), $.alt($.str("]"), $.alt($.str("{"), $.alt($.str("}"), $.alt($.str("?"), $.str(":"))))));
exports.notControlKeyword$noSkip = $.alt($.str("return"), $.alt($.str("var"), $.alt($.str("repeat"), $.alt($.str("do"), $.alt($.str("while"), $.alt($.str("until"), $.alt($.str("try"), $.alt($.str("catch"), $.alt($.str("ifnot"), $.alt($.str("if"), $.alt($.str("then"), $.alt($.str("elseifnot"), $.alt($.str("elseif"), $.str("else"))))))))))))));
exports.notTypeKeyword$noSkip = $.alt($.str("int"), $.alt($.str("cell"), $.alt($.str("builder"), $.alt($.str("slice"), $.alt($.str("cont"), $.alt($.str("tuple"), $.alt($.str("type"), $.alt($.str("->"), $.str("forall")))))))));
exports.notKeyword$noSkip = $.alt($.str("extern"), $.alt($.str("global"), $.alt($.str("asm"), $.alt($.str("impure"), $.alt($.str("inline_ref"), $.alt($.str("inline"), $.alt($.str("auto_apply"), $.alt($.str("method_id"), $.alt($.str("operator"), $.alt($.str("infixl"), $.alt($.str("infixr"), $.alt($.str("infix"), $.str("const")))))))))))));
exports.notDirective$noSkip = $.alt($.str("#include"), $.str("#pragma"));
exports.notDecimalNumber$noSkip = $.right($.opt($.str("-")), $.right($.plus(exports.digit$noSkip), $.eps));
exports.notHexadecimalNumber$noSkip = $.right($.opt($.str("-")), $.right($.str("0x"), $.right($.plus(exports.hexDigit$noSkip), $.eps)));
exports.funcInvalidId$noSkip = $.alt(exports.notUnderscore$noSkip, $.alt(exports.notArithOperator$noSkip, $.alt(exports.notComparisonOperator$noSkip, $.alt(exports.notBitwiseOperator$noSkip, $.alt(exports.notAssignOperator$noSkip, $.alt(exports.notDelimiter$noSkip, $.alt(exports.notControlKeyword$noSkip, $.alt(exports.notTypeKeyword$noSkip, $.alt(exports.notKeyword$noSkip, $.alt(exports.notDirective$noSkip, $.alt(exports.notDecimalNumber$noSkip, exports.notHexadecimalNumber$noSkip)))))))))));
exports.whiteSpace$noSkip = $.regex(" \\t\\r\\n", false);
exports.funcPlainId$noSkip = $.right($.lookNeg($.right(exports.funcInvalidId$noSkip, $.right($.str(")"), $.eps))), $.right($.plus($.right($.lookNeg($.alt(exports.whiteSpace$noSkip, $.regex("()[\\],.;~", false))), $.right($.any, $.eps))), $.eps));
exports.funcId$noSkip = $.right($.lookNeg($.alt($.str("\""), $.str("{-"))), $.right($.opt($.alt($.str("."), $.str("~"))), $.right($.alt(exports.funcQuotedId$noSkip, exports.funcPlainId$noSkip), $.eps)));
exports.NativeFunctionDecl$noSkip = $.field($.pure("NativeFunctionDecl"), "$", $.right($.str("@name"), $.right($.str("("), $.field(exports.funcId$noSkip, "nativeName", $.right($.str(")"), $.field($.star(exports.functionAttribute$noSkip), "attributes", $.right(exports.$native$noSkip, $.field(exports.Id$noSkip, "name", $.field(exports.parametersFormal$noSkip, "parameters", $.field($.opt(exports.ascription$noSkip), "returnType", $.right($.str(";"), $.eps)))))))))));
exports.ConstantDefinition$noSkip = $.field($.pure("ConstantDefinition"), "$", $.right($.str("="), $.field(exports.expression$noSkip, "expression", $.right($.alt($.str(";"), $.lookPos($.str("}"))), $.eps))));
exports.ConstantDeclaration$noSkip = $.field($.pure("ConstantDeclaration"), "$", $.right($.stry($.alt($.str(";"), $.lookPos($.str("}")))), $.eps));
exports.Constant$noSkip = $.field($.pure("Constant"), "$", $.field($.star($.alt(exports.virtual$noSkip, $.alt(exports.override$noSkip, exports.$abstract$noSkip))), "attributes", $.right(exports.$const$noSkip, $.field(exports.Id$noSkip, "name", $.field(exports.ascription$noSkip, "type", $.field($.alt(exports.ConstantDefinition$noSkip, exports.ConstantDeclaration$noSkip), "body", $.eps))))));
exports.FieldDecl$noSkip = $.field($.pure("FieldDecl"), "$", $.field(exports.Id$noSkip, "name", $.field(exports.ascription$noSkip, "type", $.field($.opt($.right(exports.$as$noSkip, exports.Id$noSkip)), "as", $.field($.opt($.right($.str("="), exports.expression$noSkip)), "expression", $.eps)))));
exports.structFields$noSkip = $.left($.opt((0, exports.inter$noSkip)(exports.FieldDecl$noSkip, $.str(";"))), $.opt($.str(";")));
exports.StructDecl$noSkip = $.field($.pure("StructDecl"), "$", $.right($.str("struct"), $.field(exports.TypeId$noSkip, "name", $.right($.str("{"), $.field(exports.structFields$noSkip, "fields", $.right($.str("}"), $.eps))))));
exports.MessageDecl$noSkip = $.field($.pure("MessageDecl"), "$", $.right($.str("message"), $.field($.opt($.right($.str("("), $.left(exports.integerLiteral$noSkip, $.str(")")))), "id", $.field(exports.TypeId$noSkip, "name", $.right($.str("{"), $.field(exports.structFields$noSkip, "fields", $.right($.str("}"), $.eps)))))));
exports.ContractAttribute$noSkip = $.field($.pure("ContractAttribute"), "$", $.right($.right($.str("@interface"), $.right($.str("("), $.right(exports.StringLiteral$noSkip, $.right($.str(")"), $.eps)))), $.eps));
exports.contract$noSkip = $.right($.str("contract"), $.right($.lookNeg(exports.idPart$noSkip), $.eps));
exports.InheritedTraits$noSkip = $.field($.pure("InheritedTraits"), "$", $.field((0, exports.inter$noSkip)(exports.Id$noSkip, $.str(",")), "ids", $.right($.opt($.str(",")), $.eps)));
exports.ContractInit$noSkip = $.field($.pure("ContractInit"), "$", $.right($.right($.str("init"), $.right(exports.parametersFormal$noSkip, $.right(exports.statements$noSkip, $.eps))), $.eps));
exports.receiverParam$noSkip = $.opt($.alt(exports.Parameter$noSkip, exports.StringLiteral$noSkip));
exports.ReceiverReceive$noSkip = $.field($.pure("ReceiverReceive"), "$", $.right(exports.receive$noSkip, $.right($.str("("), $.field(exports.receiverParam$noSkip, "param", $.right($.str(")"), $.field(exports.statements$noSkip, "body", $.eps))))));
exports.ReceiverExternal$noSkip = $.field($.pure("ReceiverExternal"), "$", $.right(exports.external$noSkip, $.right($.str("("), $.field(exports.receiverParam$noSkip, "param", $.right($.str(")"), $.field(exports.statements$noSkip, "body", $.eps))))));
exports.ReceiverBounced$noSkip = $.field($.pure("ReceiverBounced"), "$", $.right($.str("bounced"), $.right($.str("("), $.field(exports.Parameter$noSkip, "param", $.right($.str(")"), $.field(exports.statements$noSkip, "body", $.eps))))));
exports.receiver$noSkip = $.alt(exports.ReceiverReceive$noSkip, $.alt(exports.ReceiverExternal$noSkip, exports.ReceiverBounced$noSkip));
exports.storageVar$noSkip = $.left(exports.FieldDecl$noSkip, $.alt($.str(";"), $.lookPos($.str("}"))));
exports.contractItemDecl$noSkip = $.alt(exports.ContractInit$noSkip, $.alt(exports.receiver$noSkip, $.alt(exports.Function$noSkip, $.alt(exports.Constant$noSkip, exports.storageVar$noSkip))));
exports.Contract$noSkip = $.field($.pure("Contract"), "$", $.field($.star(exports.ContractAttribute$noSkip), "attributes", $.right(exports.contract$noSkip, $.field(exports.Id$noSkip, "name", $.field($.opt($.right(exports.$with$noSkip, exports.InheritedTraits$noSkip)), "traits", $.right($.str("{"), $.field($.star(exports.contractItemDecl$noSkip), "items", $.right($.str("}"), $.eps))))))));
exports.traitItemDecl$noSkip = $.alt(exports.receiver$noSkip, $.alt(exports.Function$noSkip, $.alt(exports.Constant$noSkip, exports.storageVar$noSkip)));
exports.Trait$noSkip = $.field($.pure("Trait"), "$", $.right($.right($.star(exports.ContractAttribute$noSkip), $.right(exports.trait$noSkip, $.right(exports.Id$noSkip, $.right($.opt($.right(exports.$with$noSkip, $.right(exports.InheritedTraits$noSkip, $.eps))), $.right($.str("{"), $.right($.star(exports.traitItemDecl$noSkip), $.right($.str("}"), $.eps))))))), $.eps));
exports.moduleItem$noSkip = $.alt(exports.PrimitiveTypeDecl$noSkip, $.alt(exports.Function$noSkip, $.alt(exports.AsmFunction$noSkip, $.alt(exports.NativeFunctionDecl$noSkip, $.alt(exports.Constant$noSkip, $.alt(exports.StructDecl$noSkip, $.alt(exports.MessageDecl$noSkip, $.alt(exports.Contract$noSkip, exports.Trait$noSkip))))))));
exports.Module$noSkip = $.field($.pure("Module"), "$", $.field($.star(exports.Import$noSkip), "imports", $.field($.star(exports.moduleItem$noSkip), "items", $.eps)));
exports.nonQuoteOrBackslashChar = $.right($.lookNeg($.alt($.left($.str("\""), $.star(exports.space$noSkip)), $.left($.str("\\"), $.star(exports.space$noSkip)))), $.right($.left($.any, $.star(exports.space$noSkip)), $.eps));
exports.escapeChar = $.alt($.left($.regex("\\\\\"nrtvbf", false), $.star(exports.space$noSkip)), $.alt($.right($.left($.str("u{"), $.star(exports.space$noSkip)), $.right(exports.hexDigit, $.right($.opt(exports.hexDigit), $.right($.opt(exports.hexDigit), $.right($.opt(exports.hexDigit), $.right($.opt(exports.hexDigit), $.right($.opt(exports.hexDigit), $.right($.left($.str("}"), $.star(exports.space$noSkip)), $.eps)))))))), $.alt($.right($.left($.str("u"), $.star(exports.space$noSkip)), $.right(exports.hexDigit, $.right(exports.hexDigit, $.right(exports.hexDigit, $.right(exports.hexDigit, $.eps))))), $.right($.left($.str("x"), $.star(exports.space$noSkip)), $.right(exports.hexDigit, $.right(exports.hexDigit, $.eps))))));
exports.escapeSequence = $.right($.left($.str("\\"), $.star(exports.space$noSkip)), $.right(exports.escapeChar, $.eps));
exports.extend = $.left($.right($.str("extend"), $.right($.lookNeg(exports.idPart$noSkip), $.eps)), $.star(exports.space$noSkip));
exports.$public = $.left($.right($.str("public"), $.right($.lookNeg(exports.idPart$noSkip), $.eps)), $.star(exports.space$noSkip));
exports.keyword = $.alt(exports.fun, $.alt(exports.$let, $.alt(exports.$return, $.alt(exports.receive, $.alt(exports.extend, $.alt(exports.$native, $.alt(exports.primitive, $.alt(exports.$public, $.alt(exports.$null, $.alt(exports.$if, $.alt(exports.$else, $.alt(exports.$while, $.alt(exports.repeat, $.alt(exports.$do, $.alt(exports.until, $.alt(exports.$try, $.alt(exports.$catch, $.alt(exports.foreach, $.alt(exports.$as, $.alt(exports.map, $.alt(exports.mutates, $.alt(exports.$extends, $.alt(exports.external, $.alt(exports.$import, $.alt(exports.$with, $.alt(exports.trait, $.alt(exports.initOf, $.alt(exports.override, $.alt(exports.$abstract, $.alt(exports.virtual, $.alt(exports.inline, exports.$const)))))))))))))))))))))))))))))));
exports.reservedWord = $.right(exports.keyword, $.right($.lookNeg(exports.idPart), $.eps));
exports.JustImports = $.field($.pure("JustImports"), "$", $.field($.star(exports.Import), "imports", $.right($.star($.left($.any, $.star(exports.space$noSkip))), $.eps)));
exports.JustImports$noSkip = $.field($.pure("JustImports"), "$", $.field($.star(exports.Import$noSkip), "imports", $.right($.star($.any), $.eps)));
